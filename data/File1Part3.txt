e Controller where to store them, and then sending them to the appropriate storage node(s). Note: Once the first chunk has been transferred to its destination storage node, that node will pass the chunk along in a pipeline fashion. The client should not send each chunk 3 times.
Retrieving files in parallel. Each chunk in the file being retrieved will be requested and transferred on a separate thread. Once the chunks are retrieved, the file is reconstructed on the client machine.
The client will also be able to print out a list of files (retrieved from the Controller), and the total available disk space in the cluster (in GB).
Tips and Resources
Log early, log often! You can use a logging framework or just simple println() calls, but you should print copious log messages. For example, if a StorageNode goes down, the Controller should probably print a message acknowledging so. This will help you debug your system and it also makes grading interviews go smoothly.
Here￢ﾀﾙs an example of using Protocol Buffers for serialization and communication.
Use the bass cluster (bass01 ￢ﾀﾓ bass24) to test your code in a distributed setting.
These nodes have the Protocol Buffers library installed as well as the protoc compiler.
To store your chunk data, use /home2/$(whoami), where $(whoami) is your user name.
Project Deliverables
This project will be worth 20% of your course grade (20 points). The deliverables include:
[2 pts]: A brief design document (1 page). You may use UML diagrams, Vizio, OmniGraffle, or even pen and paper. This outlines:
Components of your DFS (this includes the components outlined above but might include other items that you think you￢ﾀﾙll need)
Design decisions (how big the chunks should be, how you will place replicas, etc￢ﾀﾦ)
Messages the components will use to communicate
[6 pts]: Control node implementation:
[1] File list and chunk list
[1] Storage node list
[2] Detecting a node failure
[2] Replica maintenance
[5 pts]: Storage node implementation:
[2] St
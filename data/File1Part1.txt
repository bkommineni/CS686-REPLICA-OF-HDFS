CS686 Project 1: Distributed File System (v 1.4)
Due: October 6
In this project, you will build your own distributed file system (DFS) based on the technologies we￢ﾀﾙve studied from Amazon, Google, and others. Your DFS will support multiple storage nodes responsible for managing data. Key features include:
Parallel retrievals: large files will be split into multiple chunks. Client applications retrieve these chunks in parallel.
Interoperability: the DFS will use Google Protocol Buffers to serialize messages. Do not use Java serialization. This allows other applications to easily implement your wire format.
Fault tolerance: your system must be able to detect and withstand two concurrent storage node failures and continue operating normally. It will also be able to recover corrupted files.
Your implementation must be done in Java, and we will test it using the bass cluster here in the CS department. Communication between components must be implemented via sockets (not RMI or similar technologies) and you may not use any external libraries. The Java Development Kit has everything you need to complete this assignment.
Since this is a graduate-level class, you have leeway on how you design and implement your system. However, you should be able to explain your design decisions. Additionally, you must include the following components:
Controller
Storage Node
Client
Version Control
To set up your submission repository on GitHub, visit: https://classroom.github.com/a/Yoknj2ce
In the spirit of versioning, I will update the version number at the top of this document every time a change is made and list any changes in the changelog below.
Controller
The Controller is responsible for managing resources in the system, somewhat like an HDFS NameNode. When a new storage node joins your DFS, the first thing it does is contact the Controller. The Controller manages a few data structures:
A list of active nodes
A list of files
For each file, a list of its chunks and where they are loc